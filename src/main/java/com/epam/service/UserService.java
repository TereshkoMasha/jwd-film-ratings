package com.epam.service;

import com.epam.entity.User;
import com.epam.entity.enums.UserStatus;
import com.epam.exception.ServiceException;

import java.util.List;
import java.util.Optional;

public interface UserService extends BaseService<User> {
    /**
     * Creates and returns autogenerated (@code User) id
     *
     * @param login    unique key of table 'user'
     * @param password a password value of table 'user'
     *                 create MD5 hashes using {@link org.apache.commons.codec.digest.DigestUtils}
     * @param name     a first name  + surname value
     * @return autogenerated user id
     * @throws ServiceException if {@code DAOException} occurs
     */
    int registerUser(String login, String password, String name) throws ServiceException;

    /**
     * Updates user password
     *
     * @param password value to change password
     * @return {@code true} if user rating was updated, otherwise {@code false}
     * @throws ServiceException if database access error
     */
    boolean changePassword(Integer id, String password) throws ServiceException;

    /**
     * Reads user-data to given user login.
     *
     * @param login unique key of table 'user'
     * @return {@link User}
     * @throws ServiceException if {@code DAOException} occurs
     */
    Optional<User> findByLogin(String login) throws ServiceException;

    /**
     * The method is used only by the administrator
     * used to change status to blocked
     *
     * @param status new user status
     * @return {@code true} if the status has been changed, otherwise {@code false}
     * @throws ServiceException if {@code DAOException} occurs
     */
    boolean updateStatus(UserStatus status, Integer userId) throws ServiceException;

    /**
     * Updates a column rating table user
     * fired when the user rates a movie close to their average rating
     * performed every five film ratings.
     *
     * @param action to downgrade {@code true} or upgrade {@code false} a rating
     * @return {@code true} if user rating was updated, otherwise {@code false}
     * @throws ServiceException if {@code DAOException} occurs
     */
    boolean updateRatingAfterEvaluating(Integer userId, Boolean action) throws ServiceException;

    /**
     * The method is used only by the administrator
     * updates a column rating table user ({@code UserStatus} is automatically changed in the database)
     *
     * @param id the primary key of table 'user'
     * @return {@code true} if user rating was updated, otherwise {@code false}
     * @throws ServiceException if {@code DAOException} occurs
     */
    boolean updateRating(Integer id, Double rating) throws ServiceException;

    /**
     * Gets user role id from database using login
     *
     * @param login unique key of table 'user'
     * @return founded user role id
     * @throws ServiceException if {@code DAOException} occurs
     */
    int getRoleId(String login) throws ServiceException;

    /**
     * Used to check the validity of the login during the registration process.
     *
     * @param login unique key of table 'user'
     * @return {@code true} if user was was found, {@code false} otherwise
     * @throws ServiceException if {@code DAOException} occurs
     */
    boolean checkLogin(String login) throws ServiceException;

    /**
     * Used to check the validity of the username and password during the login process.
     *
     * @param login    unique key of table 'user'
     * @param password key of table 'user'
     *                 create MD5 hash of password using {@link org.apache.commons.codec.digest.DigestUtils}
     * @return {@code true} if user was was found, {@code false} otherwise
     * @throws ServiceException if {@code DAOException} occurs
     */
    boolean findByLoginPassword(String login, String password) throws ServiceException;


    /**
     * @param id the primary key of table 'movie'
     * @return {@code List<User>} list of users who rated the movie
     * @throws ServiceException if {@code DAOException} occurs
     */
    List<User> findAllUsersByMovieId(Integer id) throws ServiceException;
}
